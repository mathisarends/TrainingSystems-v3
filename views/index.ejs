<main id="main" class="grid-container grid-container--home">


  <div class="flow" style="--flow-space: 0.25rem;">
    <h1 class="headline-animation text-accent fs-500 ff-sans-cond uppercase letter-spacing-1">TYR Training Systems
      <span class="d-block fs-900 ff-serif text-white">TYR</span>
    </h1>
    <!-- <button id="change-shit">change shit</button> -->
  </div>

  <div>
    <div class="index-view" style="margin-top: 3rem; display: block">
      <% if (user) { %>
        <a href="/training" class="large-button uppercase ff-serif fs-600 text-dark bg-white"
          style="padding-left: 2em; padding-right: 2em;">START</a>
        <% } else { %>
          <a href="/login" class="large-button uppercase ff-serif fs-600 text-dark bg-white">LOGIN</a>
          <% } %>
    </div>

    <div class="index-view" style="margin-top: 3rem; display: none;">
      <button id="install-button" class="large-button uppercase ff-serif fs-600 text-dark bg-white"
        style="padding-left: 1.45em; padding-right: 1.45em;">Install</button>
    </div>
  </div>

</main>

<div id="show-wifi-bar" class="navigate-week-button-container text-accent" style="background: inherit; border: none;">
  <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor"
    stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevrons-up">
    <polyline points="17 11 12 6 7 11"></polyline>
    <polyline points="17 18 12 13 7 18"></polyline>
  </svg>
</div>

<footer>
  <div class="navigate-week-button-container text-accent" id="wifi-bar" style="display: flex;">
    <div id="online-svg" style="display: none">

      <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 24 24" fill="none"
        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
        class="feather feather-wifi">
        <path d="M5 12.55a11 11 0 0 1 14.08 0"></path>
        <path d="M1.42 9a16 16 0 0 1 21.16 0"></path>
        <path d="M8.53 16.11a6 6 0 0 1 6.95 0"></path>
        <line x1="12" y1="20" x2="12.01" y2="20"></line>
      </svg>
    </div>
    <div id="offline-svg" style="display: none;">

      <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 24 24" fill="none"
        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
        class="feather feather-wifi-off">
        <line x1="1" y1="1" x2="23" y2="23"></line>
        <path d="M16.72 11.06A10.94 10.94 0 0 1 19 12.55"></path>
        <path d="M5 12.55a10.94 10.94 0 0 1 5.17-2.39"></path>
        <path d="M10.71 5.05A16 16 0 0 1 22.58 9"></path>
        <path d="M1.42 9a15.91 15.91 0 0 1 4.7-2.88"></path>
        <path d="M8.53 16.11a6 6 0 0 1 6.95 0"></path>
        <line x1="12" y1="20" x2="12.01" y2="20"></line>
      </svg>
    </div>

    <!--nur anzeigen wenn das gerät online im default modus && online && daten pedning sind === refresh button-->
    <div id="sync-svg" style="display: none">

      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
        class="feather feather-slack">
        <path d="M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z">
        </path>
        <path d="M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"></path>
        <path d="M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"></path>
        <path d="M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"></path>
        <path d="M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z">
        </path>
        <path d="M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"></path>
        <path d="M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"></path>
        <path d="M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"></path>
      </svg>
    </div>
  </div>
</footer>


<script src="/javascripts/homePage/pwaBanner.js"></script>

<script>

  document.addEventListener("DOMContentLoaded", () => {


    // Prüfen, ob bereits ein Service Worker aktiv ist
    if ("serviceWorker" in navigator) {
      navigator.serviceWorker.getRegistration()
        .then((registration) => {
          if (registration && registration.active) {
            console.log("Ein Service Worker ist bereits aktiv.");

            handleNetworkModeSelector(registration);

          } else {
            navigator.serviceWorker.register("/register-service-worker", {
              scope: "/" // global scope
            })
              .then((registration) => {
                console.log("Service Worker registriert:", registration);

                handleNetworkModeSelector(registration);

              })
              .catch((error) => {
                console.log("Fehler bei der Registrierung des Service Workers:", error);
              });
          }
        });



    } else {
      //ansonsten diese bar ausblenden
      document.getElementById("wifi-bar").style.display = "none";
    }
  });

  // add logic independet off whether the service worker was already registered or not
  async function handleNetworkModeSelector(registration) {

    // show wifi bar only when the user wants:
    const showWifiBar = document.getElementById("show-wifi-bar");
    const wifiBar = document.getElementById("wifi-bar");

    // only show this option if the screen is smaller than 1024px <= desktop pcs && laptops
    const screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    if (screenWidth > 1024) {
      showWifiBar.style.display = "none";
    }

    showWifiBar.addEventListener("click", () => {
      showWifiBar.style.display = "none";
      wifiBar.style.transform = "translateY(0%)";
    })

    const onlineSVG = document.getElementById("online-svg");
    const offlineSVG = document.getElementById("offline-svg");
    const syncSVG = document.getElementById("sync-svg")

    const isOnlineModeOn = localStorage.getItem("wifi");

    // Funktion zum Warten auf die Aktivierung des Service Workers
    async function waitForServiceWorkerActivation() {
      while (!registration.active) {
        await new Promise(resolve => setTimeout(resolve, 100)); // Warten Sie 100 Millisekunden und überprüfen Sie erneut
      }
    }

    await waitForServiceWorkerActivation(); //auf registtrierung warten

    // intitialen status setzen und an den service worker senden:
    if (isOnlineModeOn === "true") {
      registration.active.postMessage("switchToDefaultMode");
      onlineSVG.style.display = "block";
      offlineSVG.style.display = "none";

    } else if (isOnlineModeOn === "false") {
      registration.active.postMessage("switchToOfflineMode");
      onlineSVG.style.display = "none";
      offlineSVG.style.display = "block"
    } else { //inital das hier wenn kein wert gesetzt ist:
      registration.active.postMessage("switchToDefaultMode");
      onlineSVG.style.display = "block";
      offlineSVG.style.display = "none";
    }


    // bei auswahl neune status an den service worker senden und im localstorage für initiales laden speichern
    onlineSVG.addEventListener("click", () => {

      registration.active.postMessage("switchToOfflineMode");
      syncSVG.style.display = "none";
      localStorage.setItem("wifi", false);
      onlineSVG.style.display = "none";
      offlineSVG.style.display = "block";
    })

    offlineSVG.addEventListener("click", () => {

      registration.active.postMessage("switchToDefaultMode");
      localStorage.setItem("wifi", true);
      onlineSVG.style.display = "block";
      offlineSVG.style.display = "none";
    })

    //wenn auf den online modus gewechselt wird und der service worker feststellt dass es ungespeicherte daten aus dem offline mode gibt dann wird dieser button angezeigt: um zu synchroniseren:
    navigator.serviceWorker.addEventListener("message", (event) => {
      const data = event.data;
      // wenn die anfrage dazu gestellt wurde und die seite tatsächlich online ist:
      if (data.type === "showSyncButton" && navigator.onLine) {
        syncSVG.style.display = "block";
        onlineSVG.style.display = "none";
      }
    })

    syncSVG.addEventListener("click", () => {
      registration.active.postMessage("syncOfflineData");
      syncSVG.style.display = "none"; //danach wieder ausblenden:
      onlineSVG.style.display = "block";
    })

  }

</script>