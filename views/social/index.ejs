<main id="main" class="grid-container grid-container--training grid-container--stats flow" style="overflow-x: hidden">
  <h1 class="numbered-title"><span aria-hidden="true"><%= username %></span>SOCIAL</h1>

  <div
    class="tab-list underline-indicators flex"
    role="tablist"
    aria-label="destination list"
    style="justify-content: space-between"
  >
    <button
      id="friends-tab"
      aria-selected="true"
      role="tab"
      aria-controls="friends-tab"
      class="uppercase ff-sans-cond text-accent letter-spacing-2"
      tabindex="0"
      id="friends"
    >
      FRIENDS
    </button>
    <button
      id="pending-friends-tab"
      aria-selected="false"
      role="tab"
      aria-controls="add-friends-tab"
      class="uppercase ff-sans-cond text-accent letter-spacing-2"
      tabindex="0"
    >
      PENDING
    </button>
    <button
      id="search-friends-tab"
      aria-selected="false"
      role="tab"
      aria-controls="settings-tab"
      class="uppercase ff-sans-cond text-accent letter-spacing-2"
      tabindex="0"
      id="search"
    >
      SEARCH
    </button>
  </div>

  <section class="custom-view-container flow" style="--flow-space: 2em">
    <div class="training-plan-container flex" style="--gap: 1rem">
      <% for (let i=0; i < friends.length; i++) { %>

      <div class="custom-training-container">
        <div class="training-plan-title uppercase"><%= friends[i].name %></div>
        <div class="ff-sans-cond fs-400 letter-spacing-4"><%= friends[i].friendSince %></div>
      </div>
      <% } %>
    </div>
  </section>

  <section class="custom-view-container flow" style="--flow-space: 2em" hidden>
    <div class="training-plan-container flex" style="--gap: 1rem">
      <% for (let i=0; i < pendingFriends.length; i++) { %>

      <div class="custom-training-container">
        <div class="training-plan-title uppercase"><%= pendingFriends[i].name %></div>
        <div class="ff-sans-cond fs-400 letter-spacing-4"><%= pendingFriends[i].requestSent %></div>
        <div class="ff-sans-cond fs-400 letter-spacing-4"><%= pendingFriends[i].status %></div>
      </div>
      <% } %>
    </div>
  </section>

  <section class="custom-view-container flow" style="--flow-space: 2em">
    <div>
      <input type="text" id="search-bar" placeholder="Look for people" />
    </div>

    <div class="training-plan-container flex" style="--gap: 1rem">
      <% for (let i=0; i < otherUsers.length; i++) { %>

      <div class="custom-training-container friend-container" style="margin: auto; padding-top: 1.25rem">
        <div style="display: none" class="hidden-index"><%= i %></div>
        <div
          class="training-plan-title flex uppercase text-white"
          style="justify-content: space-between; padding-inline: 1.75rem"
        >
          <div class="userbase-names"><%= otherUsers[i].name %></div>
          <input type="hidden" class="userId" value="<%= otherUsers[i]._id.toString() %>" />
          <div class="flex">
            <div class="add-friend-button" style="color: hsl(var(--clr-white) / 0.75)">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="feather feather-user-plus"
              >
                <path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                <circle cx="8.5" cy="7" r="4"></circle>
                <line x1="20" y1="8" x2="20" y2="14"></line>
                <line x1="23" y1="11" x2="17" y2="11"></line>
              </svg>
            </div>
          </div>
        </div>

        <div class="flex" style="justify-content: space-evenly"></div>
      </div>
      <% } %>
    </div>
  </section>

  <div class="training-button-container" style="width: 100%">
    <button class="main-page-button training-plan-button uppercase" id="start-custom-training-button">
      Trainieren
    </button>

    <button class="main-page-button edit-training-plan-button uppercase" id="edit-custom-training-button">
      Bearbeiten
    </button>

    <button class="main-page-button back-button uppercase" id="edit-custom-training-button">BACK</button>
  </div>
</main>

<script>
  const navigateBackBTN = document.querySelector(".back-button");
  navigateBackBTN.addEventListener("click", e => {
    e.preventDefault();

    window.location.href = "/";
  });

  const addFriendButtons = document.querySelectorAll(".add-friend-button");

  addFriendButtons.forEach((addFriendButton, index) => {
    addFriendButton.addEventListener("click", e => {
      e.preventDefault();

      const userId = document.querySelectorAll(".userId")[index].value;
      console.log(userId);

      const url = window.location.href;
      const baseUrl = window.location.origin;
      const relativeURL = url.replace(baseUrl, "");

      const fetchUrl = `${relativeURL}/add`;
      console.log(fetchUrl);

      fetch(`${relativeURL}/add`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ addedUserId: userId })
      })
        .then(response => {
          if (!response.ok) {
            throw new Error(`Fehler: ${response.statusText}`);
          }
          return response.json();
        })
        .then(data => {
          console.log("Erfolgreich gesendet", data);
        })
        .catch(err => {
          console.error("Fehler beim Senden der Anfrage", err);
        });

      // use ajax in order to send friend request to /social/friends with the field addedUserId
    });
  });

  // tab selector
  const tabList = document.querySelector('[role="tablist"]');
  const tabs = tabList.querySelectorAll('[role="tab"]');
  const sections = document.querySelectorAll("section");

  tabs.forEach((tab, tabIndex) => {
    tab.addEventListener("click", e => {
      e.preventDefault();

      sections.forEach((section, sectionIndex) => {
        section.setAttribute("hidden", true);
        tabs[sectionIndex].setAttribute("aria-selected", false);
      });

      sections[tabIndex].removeAttribute("hidden");
      tab.setAttribute("aria-selected", true);
    });
  });

  // show right tab from start
  function triggerClick(selectedTab) {
    const clickEvent = new Event("click", {
      bubbles: true,
      cancelable: true
    });
    selectedTab.dispatchEvent(clickEvent);
  }

  const tabButtons = document.querySelectorAll('[role="tab"]');

  tabButtons.forEach(button => {
    button.addEventListener("click", e => {
      e.preventDefault();
      localStorage.setItem("selectedFriendTab", button.id);
    });
  });

  const lastSelectedTab = localStorage.getItem("selectedFriendTab");
  if (lastSelectedTab) {
    const tabToSelect = document.getElementById(lastSelectedTab);
    if (tabToSelect) {
      tabToSelect.setAttribute("aria-selected", true);
      triggerClick(tabToSelect);
    }
  } else {
    tabButtons[0].setAttribute("aria-selected", true);
    triggerClick(tabButtons[0]);
  }

  // search bar
  const searchBar = document.getElementById("search-bar");
  const userBaseNames = document.querySelectorAll(".userbase-names");

  searchBar.addEventListener("input", () => {
    const searchRequest = searchBar.value.toLowerCase().trim();

    userBaseNames.forEach(userBaseField => {
      const username = userBaseField.textContent.toLowerCase().trim();

      const friendContainer = userBaseField.closest(".friend-container");
      if (friendContainer && (username.includes(searchRequest) || username.startsWith(searchRequest))) {
        friendContainer.style.display = "flex";
      } else if (friendContainer) {
        friendContainer.style.display = "none";
      }
    });
  });
</script>
